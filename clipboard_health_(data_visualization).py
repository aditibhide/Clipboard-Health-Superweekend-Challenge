# -*- coding: utf-8 -*-
"""Clipboard Health (Data Visualization).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UmDJ5pErFH0me4AY98h4gfZumEQpePU7
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates  # Import for date formatting

# Increase the display options for better readability (optional)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

# Load the dataset
# Replace 'shift_offers.csv' with the path to your CSV file
df = pd.read_csv('/content/problems_we_tackle_data.csv', parse_dates=[
    'SHIFT_START_AT', 'SHIFT_CREATED_AT', 'OFFER_VIEWED_AT',
    'CLAIMED_AT', 'CANCELED_AT', 'DELETED_AT'
])

# Preview the first few rows
print(df.head())

# Data Preprocessing

# 1. Handle Missing Values
# For this script, we'll keep all rows and handle missing values in analyses as needed

# 2. Create Additional Columns

# a. Lead Time (in hours): Time between shift creation and shift start
df['LEAD_TIME_HOURS'] = (df['SHIFT_START_AT'] - df['SHIFT_CREATED_AT']).dt.total_seconds() / 3600

# b. Time Between Offer Viewed and Shift Start
df['VIEW_TO_START_HOURS'] = (df['SHIFT_START_AT'] - df['OFFER_VIEWED_AT']).dt.total_seconds() / 3600

# c. Shift Outcome
def determine_shift_outcome(row):
    if pd.notnull(row['IS_VERIFIED']) and row['IS_VERIFIED']:
        return 'Worked'
    elif pd.notnull(row['IS_NCNS']) and row['IS_NCNS']:
        return 'No-Show'
    elif pd.notnull(row['CANCELED_AT']):
        return 'Canceled by Worker'
    elif pd.notnull(row['DELETED_AT']):
        return 'Deleted by Workplace'
    elif pd.notnull(row['CLAIMED_AT']):
        return 'Claimed'
    else:
        return 'Open'
df['SHIFT_OUTCOME'] = df.apply(determine_shift_outcome, axis=1)

# d. Total Pay for Shift
df['TOTAL_PAY'] = df['RATE'] * df['DURATION']

# e. Day of Week and Hour of Day for Shift Start
df['SHIFT_DAY_OF_WEEK'] = df['SHIFT_START_AT'].dt.day_name()
df['SHIFT_START_HOUR'] = df['SHIFT_START_AT'].dt.hour

# f. Month of Shift Start as datetime
df['SHIFT_MONTH'] = df['SHIFT_START_AT'].dt.to_period('M').dt.to_timestamp()

# Data Exploration and Visualization

# 1. Distribution of Shifts by Time Slot
plt.figure(figsize=(8, 6))
sns.countplot(x='SLOT', data=df, order=['am', 'pm', 'noc'])
plt.title('Distribution of Shifts by Time Slot')
plt.xlabel('Shift Slot')
plt.ylabel('Number of Shifts')
plt.savefig('/content/distribution_shifts_time_slot.png')
plt.show()

# 2. Distribution of Pay Rates
plt.figure(figsize=(10, 6))
sns.histplot(df['RATE'], bins=50, kde=True)
plt.title('Distribution of Pay Rates')
plt.xlabel('Hourly Rate ($)')
plt.ylabel('Frequency')
plt.savefig('/content/distribution_pay_rates.png')
plt.show()

# 3. Pay Rates by Shift Slot
plt.figure(figsize=(8, 6))
sns.boxplot(x='SLOT', y='RATE', data=df, order=['am', 'pm', 'noc'])
plt.title('Pay Rates by Shift Slot')
plt.xlabel('Shift Slot')
plt.ylabel('Hourly Rate ($)')
plt.savefig('/content/pay_rates_by_shift_slot.png')
plt.show()

# 4. Lead Time Distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['LEAD_TIME_HOURS'], bins=50, kde=True)
plt.title('Distribution of Lead Time (Hours)')
plt.xlabel('Lead Time (Hours)')
plt.ylabel('Frequency')
plt.savefig('/content/lead_time_distribution.png')
plt.show()

# 5. Pay Rate vs. Lead Time
plt.figure(figsize=(10, 6))
sns.scatterplot(x='LEAD_TIME_HOURS', y='RATE', hue='SLOT', data=df, alpha=0.5)
plt.title('Pay Rate vs. Lead Time')
plt.xlabel('Lead Time (Hours)')
plt.ylabel('Hourly Rate ($)')
plt.legend(title='Shift Slot')
plt.savefig('/content/pay_rate_vs_lead_time.png')
plt.show()

# 6. Shift Duration Distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['DURATION'], bins=30, kde=True)
plt.title('Distribution of Shift Durations')
plt.xlabel('Shift Duration (Hours)')
plt.ylabel('Frequency')
plt.savefig('/content/shift_duration_distribution.png')
plt.show()

# 7. Pay Rate vs. Shift Duration
plt.figure(figsize=(10, 6))
sns.scatterplot(x='DURATION', y='RATE', data=df, alpha=0.5)
plt.title('Pay Rate vs. Shift Duration')
plt.xlabel('Shift Duration (Hours)')
plt.ylabel('Hourly Rate ($)')
plt.savefig('/content/pay_rate_vs_shift_duration.png')
plt.show()

# 8. Shift Outcomes
plt.figure(figsize=(10, 6))
sns.countplot(y='SHIFT_OUTCOME', data=df, order=df['SHIFT_OUTCOME'].value_counts().index)
plt.title('Shift Outcomes')
plt.xlabel('Number of Shifts')
plt.ylabel('Shift Outcome')
plt.savefig('/content/shift_outcomes.png')
plt.show()

# 9. Shifts Over Time
# Group by 'SHIFT_MONTH' and count shifts
shifts_over_time = df.groupby('SHIFT_MONTH').size().reset_index(name='NUMBER_OF_SHIFTS')

# Sort the DataFrame by 'SHIFT_MONTH'
shifts_over_time = shifts_over_time.sort_values('SHIFT_MONTH')

# Plot
plt.figure(figsize=(12, 6))
sns.lineplot(x='SHIFT_MONTH', y='NUMBER_OF_SHIFTS', data=shifts_over_time, marker='o')
plt.title('Number of Shifts Over Time')
plt.xlabel('Month')
plt.ylabel('Number of Shifts')

# Format x-axis for dates
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
plt.xticks(rotation=45)

plt.savefig('/content/shifts_over_time.png')
plt.show()

# 10. Shifts by Day of Week
plt.figure(figsize=(10, 6))
order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
sns.countplot(x='SHIFT_DAY_OF_WEEK', data=df, order=order)
plt.title('Number of Shifts by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Number of Shifts')
plt.savefig('/content/shifts_by_day_of_week.png')
plt.show()

# 11. Shifts by Hour of Day
plt.figure(figsize=(12, 6))
sns.countplot(x='SHIFT_START_HOUR', data=df, palette='viridis')
plt.title('Number of Shifts by Hour of Day')
plt.xlabel('Hour of Day')
plt.ylabel('Number of Shifts')
plt.savefig('/content/shifts_by_hour_of_day.png')
plt.show()

# 12. Heatmap of Shifts by Day and Hour
pivot_table = df.pivot_table(index='SHIFT_DAY_OF_WEEK', columns='SHIFT_START_HOUR', values='SHIFT_ID', aggfunc='count')
pivot_table = pivot_table.reindex(index=order)
plt.figure(figsize=(12, 8))
sns.heatmap(pivot_table, cmap='YlGnBu')
plt.title('Heatmap of Shifts by Day of Week and Hour')
plt.xlabel('Hour of Day')
plt.ylabel('Day of Week')
plt.savefig('/content/heatmap_shifts_day_hour.png')
plt.show()

# 13. Average Pay Rate by Day of Week
average_pay_by_day = df.groupby('SHIFT_DAY_OF_WEEK')['RATE'].mean().reindex(order)
plt.figure(figsize=(10, 6))
sns.barplot(x=average_pay_by_day.index, y=average_pay_by_day.values)
plt.title('Average Pay Rate by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Average Hourly Rate ($)')
plt.savefig('/content/average_pay_by_day_of_week.png')
plt.show()

# 14. Total Pay Distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['TOTAL_PAY'], bins=50, kde=True)
plt.title('Distribution of Total Pay per Shift')
plt.xlabel('Total Pay ($)')
plt.ylabel('Frequency')
plt.savefig('/content/total_pay_distribution.png')
plt.show()

# 15. Scatter Plot: Total Pay vs. Lead Time
plt.figure(figsize=(10, 6))
sns.scatterplot(x='LEAD_TIME_HOURS', y='TOTAL_PAY', hue='SLOT', data=df, alpha=0.5)
plt.title('Total Pay vs. Lead Time')
plt.xlabel('Lead Time (Hours)')
plt.ylabel('Total Pay ($)')
plt.legend(title='Shift Slot')
plt.savefig('/content/total_pay_vs_lead_time.png')
plt.show()

# 16. Shift Outcomes by Slot
plt.figure(figsize=(10, 6))
sns.countplot(x='SLOT', hue='SHIFT_OUTCOME', data=df, order=['am', 'pm', 'noc'])
plt.title('Shift Outcomes by Slot')
plt.xlabel('Shift Slot')
plt.ylabel('Number of Shifts')
plt.legend(title='Shift Outcome')
plt.savefig('/content/shift_outcomes_by_slot.png')
plt.show()

# 17. Pay Rate Distribution by Shift Outcome
plt.figure(figsize=(12, 6))
sns.boxplot(x='SHIFT_OUTCOME', y='RATE', data=df)
plt.title('Pay Rate Distribution by Shift Outcome')
plt.xlabel('Shift Outcome')
plt.ylabel('Hourly Rate ($)')
plt.xticks(rotation=45)
plt.savefig('/content/pay_rate_by_shift_outcome.png')
plt.show()

# 18. Lead Time Distribution by Shift Outcome
plt.figure(figsize=(12, 6))
sns.boxplot(x='SHIFT_OUTCOME', y='LEAD_TIME_HOURS', data=df)
plt.title('Lead Time Distribution by Shift Outcome')
plt.xlabel('Shift Outcome')
plt.ylabel('Lead Time (Hours)')
plt.xticks(rotation=45)
plt.savefig('/content/lead_time_by_shift_outcome.png')
plt.show()

# 19. Average Lead Time by Shift Slot
average_lead_time_by_slot = df.groupby('SLOT')['LEAD_TIME_HOURS'].mean()
plt.figure(figsize=(8, 6))
sns.barplot(x=average_lead_time_by_slot.index, y=average_lead_time_by_slot.values, order=['am', 'pm', 'noc'])
plt.title('Average Lead Time by Shift Slot')
plt.xlabel('Shift Slot')
plt.ylabel('Average Lead Time (Hours)')
plt.savefig('/content/average_lead_time_by_shift_slot.png')
plt.show()

# 20. Correlation Matrix
plt.figure(figsize=(12, 10))
correlation_matrix = df[['RATE', 'DURATION', 'LEAD_TIME_HOURS', 'TOTAL_PAY']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.savefig('/content/correlation_matrix.png')
plt.show()